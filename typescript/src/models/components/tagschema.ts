/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The color of the tag.
 */
export enum Color {
    Red = "red",
    Yellow = "yellow",
    Green = "green",
    Blue = "blue",
    Purple = "purple",
    Pink = "pink",
    Brown = "brown",
}

export type TagSchema = {
    /**
     * The unique ID of the tag.
     */
    id: string;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The color of the tag.
     */
    color: Color;
};

/** @internal */
export const Color$ = z.nativeEnum(Color);

/** @internal */
export namespace TagSchema$ {
    export type Inbound = {
        id: string;
        name: string;
        color: Color;
    };

    export const inboundSchema: z.ZodType<TagSchema, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            name: z.string(),
            color: Color$,
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                color: v.color,
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        color: Color;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TagSchema> = z
        .object({
            id: z.string(),
            name: z.string(),
            color: Color$,
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                color: v.color,
            };
        });
}
