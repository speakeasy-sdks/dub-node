/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TagSchema, TagSchema$ } from "./tagschema";
import * as z from "zod";

export type LinkSchema = {
    /**
     * The unique ID of the short link.
     */
    id: string;
    /**
     * The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains).
     */
    domain: string;
    /**
     * The short link slug. If not provided, a random 7-character slug will be generated.
     */
    key: string;
    /**
     * The destination URL of the short link.
     */
    url: string;
    /**
     * Whether the short link is archived.
     */
    archived?: boolean | undefined;
    /**
     * The date and time when the short link will expire in ISO-8601 format.
     */
    expiresAt: Date | null;
    /**
     * The URL to redirect to when the short link has expired.
     */
    expiredUrl: string | null;
    /**
     * The password required to access the destination URL of the short link.
     */
    password: string | null;
    /**
     * Whether the short link uses Custom Social Media Cards feature.
     */
    proxy?: boolean | undefined;
    /**
     * The title of the short link generated via `api.dub.co/metatags`. Will be used for Custom Social Media Cards if `proxy` is true.
     */
    title: string | null;
    /**
     * The description of the short link generated via `api.dub.co/metatags`. Will be used for Custom Social Media Cards if `proxy` is true.
     */
    description: string | null;
    /**
     * The image of the short link generated via `api.dub.co/metatags`. Will be used for Custom Social Media Cards if `proxy` is true.
     */
    image: string | null;
    /**
     * Whether the short link uses link cloaking.
     */
    rewrite?: boolean | undefined;
    /**
     * The iOS destination URL for the short link for iOS device targeting.
     */
    ios: string | null;
    /**
     * The Android destination URL for the short link for Android device targeting.
     */
    android: string | null;
    /**
     * Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. Learn more: https://d.to/geo
     */
    geo: Record<string, string> | null;
    /**
     * Whether the short link's stats are publicly accessible.
     */
    publicStats?: boolean | undefined;
    /**
     * [DEPRECATED] (use `tags` instead): The unique ID of the tag assigned to the short link.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    tagId: string | null;
    /**
     * The tags assigned to the short link.
     */
    tags: Array<TagSchema> | null;
    /**
     * The comments for the short link.
     */
    comments: string | null;
    /**
     * The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`).
     */
    shortLink: string;
    /**
     * The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`).
     */
    qrCode: string;
    /**
     * The UTM source of the short link.
     */
    utmSource: string | null;
    /**
     * The UTM medium of the short link.
     */
    utmMedium: string | null;
    /**
     * The UTM campaign of the short link.
     */
    utmCampaign: string | null;
    /**
     * The UTM term of the short link.
     */
    utmTerm: string | null;
    /**
     * The UTM content of the short link.
     */
    utmContent: string | null;
    /**
     * The user ID of the creator of the short link.
     */
    userId: string;
    /**
     * The workspace ID of the short link.
     */
    workspaceId: string;
    /**
     * The number of clicks on the short link.
     */
    clicks?: number | undefined;
    /**
     * The date and time when the short link was last clicked.
     */
    lastClicked: string | null;
    /**
     * The date and time when the short link was created.
     */
    createdAt: string;
    /**
     * The date and time when the short link was last updated.
     */
    updatedAt: string;
    /**
     * [DEPRECATED] (use workspaceId instead): The project ID of the short link.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectId: string;
};

/** @internal */
export namespace LinkSchema$ {
    export type Inbound = {
        id: string;
        domain: string;
        key: string;
        url: string;
        archived?: boolean | undefined;
        expiresAt: string | null;
        expiredUrl: string | null;
        password: string | null;
        proxy?: boolean | undefined;
        title: string | null;
        description: string | null;
        image: string | null;
        rewrite?: boolean | undefined;
        ios: string | null;
        android: string | null;
        geo: Record<string, string> | null;
        publicStats?: boolean | undefined;
        tagId: string | null;
        tags: Array<TagSchema$.Inbound> | null;
        comments: string | null;
        shortLink: string;
        qrCode: string;
        utm_source: string | null;
        utm_medium: string | null;
        utm_campaign: string | null;
        utm_term: string | null;
        utm_content: string | null;
        userId: string;
        workspaceId: string;
        clicks?: number | undefined;
        lastClicked: string | null;
        createdAt: string;
        updatedAt: string;
        projectId: string;
    };

    export const inboundSchema: z.ZodType<LinkSchema, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            domain: z.string(),
            key: z.string(),
            url: z.string(),
            archived: z.boolean().default(false),
            expiresAt: z.nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            ),
            expiredUrl: z.nullable(z.string()),
            password: z.nullable(z.string()),
            proxy: z.boolean().default(false),
            title: z.nullable(z.string()),
            description: z.nullable(z.string()),
            image: z.nullable(z.string()),
            rewrite: z.boolean().default(false),
            ios: z.nullable(z.string()),
            android: z.nullable(z.string()),
            geo: z.nullable(z.record(z.string())),
            publicStats: z.boolean().default(false),
            tagId: z.nullable(z.string()),
            tags: z.nullable(z.array(TagSchema$.inboundSchema)),
            comments: z.nullable(z.string()),
            shortLink: z.string(),
            qrCode: z.string(),
            utm_source: z.nullable(z.string()),
            utm_medium: z.nullable(z.string()),
            utm_campaign: z.nullable(z.string()),
            utm_term: z.nullable(z.string()),
            utm_content: z.nullable(z.string()),
            userId: z.string(),
            workspaceId: z.string(),
            clicks: z.number().default(0),
            lastClicked: z.nullable(z.string()),
            createdAt: z.string(),
            updatedAt: z.string(),
            projectId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                domain: v.domain,
                key: v.key,
                url: v.url,
                archived: v.archived,
                expiresAt: v.expiresAt,
                expiredUrl: v.expiredUrl,
                password: v.password,
                proxy: v.proxy,
                title: v.title,
                description: v.description,
                image: v.image,
                rewrite: v.rewrite,
                ios: v.ios,
                android: v.android,
                geo: v.geo,
                publicStats: v.publicStats,
                tagId: v.tagId,
                tags: v.tags,
                comments: v.comments,
                shortLink: v.shortLink,
                qrCode: v.qrCode,
                utmSource: v.utm_source,
                utmMedium: v.utm_medium,
                utmCampaign: v.utm_campaign,
                utmTerm: v.utm_term,
                utmContent: v.utm_content,
                userId: v.userId,
                workspaceId: v.workspaceId,
                clicks: v.clicks,
                lastClicked: v.lastClicked,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                projectId: v.projectId,
            };
        });

    export type Outbound = {
        id: string;
        domain: string;
        key: string;
        url: string;
        archived: boolean;
        expiresAt: string | null;
        expiredUrl: string | null;
        password: string | null;
        proxy: boolean;
        title: string | null;
        description: string | null;
        image: string | null;
        rewrite: boolean;
        ios: string | null;
        android: string | null;
        geo: Record<string, string> | null;
        publicStats: boolean;
        tagId: string | null;
        tags: Array<TagSchema$.Outbound> | null;
        comments: string | null;
        shortLink: string;
        qrCode: string;
        utm_source: string | null;
        utm_medium: string | null;
        utm_campaign: string | null;
        utm_term: string | null;
        utm_content: string | null;
        userId: string;
        workspaceId: string;
        clicks: number;
        lastClicked: string | null;
        createdAt: string;
        updatedAt: string;
        projectId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LinkSchema> = z
        .object({
            id: z.string(),
            domain: z.string(),
            key: z.string(),
            url: z.string(),
            archived: z.boolean().default(false),
            expiresAt: z.nullable(z.date().transform((v) => v.toISOString())),
            expiredUrl: z.nullable(z.string()),
            password: z.nullable(z.string()),
            proxy: z.boolean().default(false),
            title: z.nullable(z.string()),
            description: z.nullable(z.string()),
            image: z.nullable(z.string()),
            rewrite: z.boolean().default(false),
            ios: z.nullable(z.string()),
            android: z.nullable(z.string()),
            geo: z.nullable(z.record(z.string())),
            publicStats: z.boolean().default(false),
            tagId: z.nullable(z.string()),
            tags: z.nullable(z.array(TagSchema$.outboundSchema)),
            comments: z.nullable(z.string()),
            shortLink: z.string(),
            qrCode: z.string(),
            utmSource: z.nullable(z.string()),
            utmMedium: z.nullable(z.string()),
            utmCampaign: z.nullable(z.string()),
            utmTerm: z.nullable(z.string()),
            utmContent: z.nullable(z.string()),
            userId: z.string(),
            workspaceId: z.string(),
            clicks: z.number().default(0),
            lastClicked: z.nullable(z.string()),
            createdAt: z.string(),
            updatedAt: z.string(),
            projectId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                domain: v.domain,
                key: v.key,
                url: v.url,
                archived: v.archived,
                expiresAt: v.expiresAt,
                expiredUrl: v.expiredUrl,
                password: v.password,
                proxy: v.proxy,
                title: v.title,
                description: v.description,
                image: v.image,
                rewrite: v.rewrite,
                ios: v.ios,
                android: v.android,
                geo: v.geo,
                publicStats: v.publicStats,
                tagId: v.tagId,
                tags: v.tags,
                comments: v.comments,
                shortLink: v.shortLink,
                qrCode: v.qrCode,
                utm_source: v.utmSource,
                utm_medium: v.utmMedium,
                utm_campaign: v.utmCampaign,
                utm_term: v.utmTerm,
                utm_content: v.utmContent,
                userId: v.userId,
                workspaceId: v.workspaceId,
                clicks: v.clicks,
                lastClicked: v.lastClicked,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                projectId: v.projectId,
            };
        });
}
