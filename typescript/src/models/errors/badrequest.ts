/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A short code indicating the error code returned.
 */
export enum Code {
    BadRequest = "bad_request",
}

export type ErrorT = {
    /**
     * A short code indicating the error code returned.
     */
    code: Code;
    /**
     * A human readable explanation of what went wrong.
     */
    message: string;
    /**
     * A link to our documentation with more details about this error code
     */
    docUrl?: string | undefined;
};

/**
 * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
 */
export type BadRequestData = {
    error: ErrorT;
};

/**
 * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
 */
export class BadRequest extends Error {
    error: ErrorT;

    /** The original data that was passed to this error instance. */
    data$: BadRequestData;

    constructor(err: BadRequestData) {
        super("");
        this.data$ = err;

        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "BadRequest";
    }
}

/** @internal */
export const Code$ = z.nativeEnum(Code);

/** @internal */
export namespace ErrorT$ {
    export type Inbound = {
        code: Code;
        message: string;
        doc_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, Inbound> = z
        .object({
            code: Code$,
            message: z.string(),
            doc_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.doc_url === undefined ? null : { docUrl: v.doc_url }),
            };
        });

    export type Outbound = {
        code: Code;
        message: string;
        doc_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .object({
            code: Code$,
            message: z.string(),
            docUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.docUrl === undefined ? null : { doc_url: v.docUrl }),
            };
        });
}

/** @internal */
export namespace BadRequest$ {
    export type Inbound = {
        error: ErrorT$.Inbound;
    };

    export const inboundSchema: z.ZodType<BadRequest, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.lazy(() => ErrorT$.inboundSchema),
        })
        .transform((v) => {
            return new BadRequest({
                error: v.error,
            });
        });

    export type Outbound = {
        error: ErrorT$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BadRequest> = z
        .instanceof(BadRequest)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    error: z.lazy(() => ErrorT$.outboundSchema),
                })
                .transform((v) => {
                    return {
                        error: v.error,
                    };
                })
        );
}
