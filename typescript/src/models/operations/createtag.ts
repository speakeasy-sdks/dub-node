/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
 */
export enum Color {
    Red = "red",
    Yellow = "yellow",
    Green = "green",
    Blue = "blue",
    Purple = "purple",
    Pink = "pink",
    Brown = "brown",
}

export type CreateTagRequestBody = {
    /**
     * The name of the tag to create.
     */
    tag: string;
    /**
     * The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown.
     */
    color?: Color | undefined;
};

/** @internal */
export const Color$ = z.nativeEnum(Color);

/** @internal */
export namespace CreateTagRequestBody$ {
    export type Inbound = {
        tag: string;
        color?: Color | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTagRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            tag: z.string(),
            color: Color$.optional(),
        })
        .transform((v) => {
            return {
                tag: v.tag,
                ...(v.color === undefined ? null : { color: v.color }),
            };
        });

    export type Outbound = {
        tag: string;
        color?: Color | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTagRequestBody> = z
        .object({
            tag: z.string(),
            color: Color$.optional(),
        })
        .transform((v) => {
            return {
                tag: v.tag,
                ...(v.color === undefined ? null : { color: v.color }),
            };
        });
}
